"""
This is a recursive-descent parser that will validate the following grammar:

<expr>          ::=     <term><expr_tail>
<expr_tail>     ::=     +<term><expr_tail>      |   -<term><expr_tail>      | e
<term>          ::=     <factor><term_tail>
<term_tail>     ::=     *<factor><term_tail>    |   /<factor><term_tail>    | e
<factor>        ::=     (<expr>)                |   <digit>
<digit>         ::=     0            | 1        |   2           |   3

Simplifying this grammar results to:

<expr>          ::=     <term>+<term>   |   <term>-<term>
<term>          ::=     <factor>*<factor>   |   <factor>/<factor>
<factor>        ::=     (<expr>)  |   0 | 1 | 2 | 3

* all valid input should be terminated by $(dollar sign)

by: Rayven Ingles
University of the Philippines Cebu Campus
"""


def expr():
    global next_token, tokens
    term()
    print(next_token, '#', tokens)
    while next_token.__eq__('+') | next_token.__eq__('-'):
        get_next()
        term()


def term():
    global next_token, tokens
    print(next_token, '#', tokens)
    factor()
    print(next_token, '#', tokens)
    while next_token.__eq__('*') | next_token.__eq__('/'):
        get_next()
        factor()


def factor():
    global next_token, tokens
    if next_token.__eq__('0') | next_token.__eq__('1') | next_token.__eq__('2') | next_token.__eq__('3'):
        get_next()
    elif next_token.__eq__('('):
        get_next()
        expr()
        if next_token.__eq__(')'):
            get_next()
        else:
            print("Invalid Input")
            quit(3)
    else:
        print("Invalid Input")
        quit(4)


def get_next():
    global next_token,tokens
    next_token = tokens[0]
    tokens = tokens[1:]


global next_token, tokens
tokens = input("Enter a string: ")
get_next()
expr()
print(next_token, '#', tokens)
if next_token.__eq__('$'):
    print("Valid Input")
else:
    print("Invalid Input")
